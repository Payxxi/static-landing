{"version":3,"sources":["lib/circle-api.js","PaymentForm.js","App.js","theme.js","index.js"],"names":["openpgp","require","CircleApi","this","baseUrl","mApiKey","options","headers","authorization","Object","assign","getPCIPublicKey","axios","get","then","response","data","catch","error","console","log","uuidv4","replace","c","r","Math","random","toString","description","payload","post","walletId","id","cardDetails","number","cvv","encryptCardData","encryptedData","idempotencyKey","keyId","expMonth","expYear","billingDetails","name","country","district","line1","line2","city","postalCode","metadata","phoneNumber","email","sessionId","ipAddress","paymentData","cardNumber","amount","currency","sourceId","encryptedMessage","paymentId","a","decodedPublicKey","atob","publicKey","message","fromText","JSON","stringify","key","readArmored","keys","publicKeys","encrypt","ciphertext","btoa","useStyles","makeStyles","theme","root","margin","spacing","label","color","fontSize","textAlign","heading","lineHeight","marginTop","subHeading","input","padding","display","width","select","borderColor","borderRadius","backgroundColor","cardWrapper","inputWrapper","borderWidth","marginRight","position","top","cardIcon","marginLeft","height","button","paddingTop","paddingBottom","paddingLeft","paddingRight","loader","success","marginBottom","circle","PaymentForm","React","useState","cards","setCards","loading","setLoading","processing","setProcessing","setError","setSuccess","setPaymentId","createPayment","cardId","payment","interval","setInterval","clearInterval","checkPayment","setTimeout","paymentID","getPayment","status","getCard","length","createCard","useEffect","getCards","classes","LinearProgress","Fragment","Typography","variant","gutterBottom","className","src","alt","style","whiteSpace","flexWrap","justifyContent","flexDirection","Grid","item","xs","md","selectWrapper","Select","required","fullWidth","defaultValue","renderValue","selected","maxWidth","overflow","map","value","container","Input","disableUnderline","Button","onClick","App","Container","Box","my","createMuiTheme","palette","primary","main","secondary","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.8552bbd6.chunk.js","sourcesContent":["import  axios  from 'axios';\n//import openpgp from 'openpgp';\nimport publicIP from 'react-native-public-ip';\nconst openpgp = require('openpgp');\n\n class CircleApi {\n    constructor(){\n                       \n        this.baseUrl = 'https://api-sandbox.circle.com/v1/'; \n        this.mApiKey = 'QVBJX0tFWTo1NzBhMWI5YTM0NzRiNTc1MmQ5NGU5MzgwN2U5ZjJlNzo5MjA0NTA1ZTRiYWJiMzQxMGJlMmY0MGI5NmJmMDNmNw==';\n        //this.mApiKey = 'QVBJX0tFWTpkY2U4M2QzYzk0YmZiYzI5MGFjY2VkNjM5ZjFkMTU1ODo1ZDliNzI0MzY3OWFjNTM3MjIxNjhkZDE5ODI3Y2NhMA=='\n\n        this.options = {\n            headers: {\n                authorization: 'Bearer ' + this.mApiKey\n            },\n        };\n\n        Object.assign(this, {\n            getPCIPublicKey() {        \n                return axios.get(this.baseUrl + 'encryption/public', this.options)\n                .then(response => {\n                    return response.data;\n                }).catch(error => {\n                    console.log(error)\n                })\n            }\n        });\n\n        Object.assign(this, {\n            uuidv4() {        \n                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n                    return v.toString(16);\n                });\n            }\n        });\n    }  \n      \n    createWallet (description) {\n        var payload = {\n            'idempotencyKey': this.uuidv4(),\n            'description': description\n        };\n\n        return axios.post(this.baseUrl + 'wallets', payload , this.options)\n        .then(response => {\n            return response.data\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    createWalletAddresss (walletId) {\n        var payload = {\n            'idempotencyKey': this.uuidv4(),\n            'currency': 'USD',\n            'chain': 'ETH'\n        };\n\n        return axios.post(this.baseUrl + 'wallets/' + walletId + '/addresses', payload , this.options)\n        .then(response => {\n            return response.data\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    createWalletTransfer (walletId) {\n        var payload = {\n            'idempotencyKey': this.uuidv4(),\n            'source': {\n                'type': 'wallet',\n                'id': walletId,\n            },\n            'destination': {\n                \"type\": \"blockchain\", \n                \"address\": \"0x4750b9eCC57847de41129B03A8A531839f3CEd9f\", \n                \"chain\": \"ETH\"\n            }, \n            \"amount\": {\n                \"amount\": \"10\", \n                \"currency\": \"USD\"\n            }\n        };\n\n        return axios.post(this.baseUrl + 'transfers', payload , this.options)\n        .then(response => {\n            return response.data\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    getTransferStatus (id) {\n        return axios.get(this.baseUrl + 'transfers/' + id , this.options)\n        .then(response => {\n            console.log(response.data);\n            return response.data\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    getWallet (walletId){\n        return axios.get(this.baseUrl + 'wallets/' + walletId, this.options)\n        .then(response => {\n            return response.data;\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    async getCard(){\n        return axios.get(this.baseUrl + 'cards', this.options)\n            .then(response => {\n                return response.data\n            }).catch(error => {\n                console.log(error.response)\n            })\n    }\n\n    async createCard(){\n        const cardDetails = {\n            number: '4200000000000000'.replace(/\\s/g, ''),\n            cvv: '111',\n          }\n\n        var encryptedData =  await this.encryptCardData(cardDetails);\n\n        var payload = {\n            idempotencyKey: this.uuidv4(),\n            keyId: encryptedData.keyId,\n            expMonth: 1,\n            expYear: 2023,\n            billingDetails: {\n                name: 'RSMIT',\n                country: 'ZA',\n                district: 'FH',\n                line1: '111',\n                line2: 'EC',\n                city: 'CT',\n                postalCode: '7974',\n            },\n            metadata : {\n                phoneNumber: '+27646909349',\n                email: 'ruan@segment.money',\n                sessionId: 'xxx',\n                ipAddress: '172.33.222.1',\n            },\n            encryptedData: encryptedData,\n        };\n\n        return axios.post(this.baseUrl + 'cards', payload, this.options)\n            .then(response => {\n                return response.data\n            }).catch(error => {\n                console.log(error.response)\n            })\n    }\n\n    async createPayment(paymentData){\n        const encryptedData =  await this.encryptCardData(paymentData.cardNumber, paymentData.cvv);\n        //var encryptedData =  await this.encryptCardData('4007400000000007', '111');\n        \n        //var cards = await this.getCard();\n\n        //console.log(cards.data)\n        var payload = {\n            'idempotencyKey': this.uuidv4(),\n            'keyId': encryptedData.keyId,\n            'metadata' : {\n               'email' : paymentData.email,\n                'phoneNumber': paymentData.phoneNumber,\n                'sessionId': 'xxx',\n                'ipAddress': '172.33.222.1',\n            },\n            'amount': {\n                'amount': paymentData.amount,\n                'currency': paymentData.currency\n            },\n            'verification': 'none',\n            //'verification': 'cvv',\n            'source': {\n                'id': paymentData.sourceId,\n                'type': 'card'\n            },\n            'encryptedData': encryptedData.encryptedMessage,\n            'cvv': paymentData.cvv\n        };\n\n        return axios.post(this.baseUrl + 'payments', payload , this.options)\n            .then(response => {\n                return response.data\n            }).catch(error => {\n                console.log(error.response)\n            })\n    }\n\n    async getPayment(paymentId){\n        //var encryptedData =  await this.encryptCardData(paymentData.cardNumber, paymentData.cvv);\n\n        return axios.get(this.baseUrl + 'payments/' + paymentId , this.options)\n            .then(response => {\n                //console.log(response)\n                return response.data.data\n            }).catch(error => {\n                console.log(error.response)\n            })\n    }\n\n    async encryptCardData(number, cvv){\n        return this.getPCIPublicKey()\n        .then(async response => {    \n            var decodedPublicKey = atob(response.data.publicKey);\n\n            var options = {\n                message: openpgp.message.fromText(JSON.stringify({number: number, cvv: cvv})),\n                publicKeys: (await openpgp.key.readArmored(decodedPublicKey)).keys\n            };\n\n            return openpgp.encrypt(options).then((ciphertext) => {\n                return {\n                    encryptedData: btoa(ciphertext.data),\n                    keyId: response.data.publicKey\n                  };\n            });\n            \n        }).catch(error => {\n            console.log(error)\n        })\n    }\n}\n\nexport default CircleApi = new CircleApi()\n\n\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport CircleApi from './lib/circle-api';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      margin: theme.spacing(6, 0, 3),\n    },\n    label: {\n      color: '#7B7F9E',\n      fontSize: '12px',\n      textAlign: 'center'\n    },\n    heading: {\n        color: '#fff',\n        fontSize: '24px',\n        textAlign: 'left',\n        lineHeight: '18px',\n        marginTop: '10px'\n    },\n    subHeading: {\n        color: '#7B7F9E',\n        fontSize: '12px',\n        textAlign: 'left'\n    },\n    input: {\n        padding: 0,\n        color: '#fff',\n        textAlign: 'center',\n        fontSize: 24, \n        display: 'inline-block',\n        width: '50px !important'\n    },\n    select: {\n        padding: 0,\n        color: '#fff',\n        textAlign: 'center',\n        fontSize: 24, \n        display: 'inline-block',\n        borderColor: '#282a36',\n        borderRadius: 12,\n        backgroundColor: '#212330',\n        textAlign: 'center',\n        paddingTop: 13,\n        paddingBottom: 13,\n        paddingLeft: 5,\n        paddingRight: 5,\n        lineHeight: 50,\n    },\n    cardWrapper: {\n        padding: 0,\n        color: '#fff',\n        textAlign: 'center',\n        fontSize: 24, \n        display: 'block',\n        borderColor: '#282a36',\n        borderRadius: 12,\n        backgroundColor: '#212330',\n        textAlign: 'center',\n        paddingTop: 13,\n        paddingBottom: 13,\n        paddingLeft: 5,\n        paddingRight: 5,\n        marginTop: 10,\n        //lineHeight: 50,\n    },\n    inputWrapper: {\n        color: '#fff',\n        textAlign: 'center',\n        fontSize: 24, \n        marginTop: 10,\n        borderWidth: 2,\n        borderColor: '#282a36',\n        borderRadius: 12,\n        backgroundColor: '#212330',\n        textAlign: 'center',\n        paddingTop: 13,\n        paddingBottom: 13,\n        paddingLeft: 25,\n        paddingRight: 25,\n    },\n    currency: {\n        //marginTop: 15,\n        marginRight: 10,\n        position: 'relative',\n        top: 5,\n    },\n    cardIcon: {\n        marginLeft: 10,\n        position: 'relative',\n        marginTop: -3,\n        height: 40\n    },\n    button: {\n        backgroundColor: '#3936BE',\n        color: '#fff',\n        paddingTop: 10,\n        paddingBottom: 10,\n        paddingLeft: 25,\n        paddingRight: 25,\n        borderRadius: 12,\n        fontSize: 36,\n    },\n    loader: {\n        width: 235\n    },\n    success: {\n        width: 183,\n        marginTop: 71,\n        marginBottom: 71,\n    },\n    circle: {\n        width: 44,\n        height: 44,\n    }\n  }));\n\nexport default function PaymentForm() {\n\n\n    const [cards, setCards] = React.useState([]);\n    const [loading, setLoading] = React.useState(false);\n    const [processing, setProcessing] = React.useState(false);\n    const [error, setError] = React.useState(false);\n    const [success, setSuccess] = React.useState(false);\n    const [paymentId, setPaymentId] = React.useState(null);\n\n    async function createPayment() {\n        setProcessing(true)\n        \n        //console.log(cards);\n\n       let payment = await CircleApi.createPayment({\n            email: 'ruan@segment.money',\n            phoneNumber: '+27646909349',\n            //sessionId: 'xxx',\n            cvv: '111',\n            cardId: 'db18ed0c-69f4-4fb5-ae37-891e6067f434',\n            amount: 10,\n            number: '4200000000000000',\n            currency: 'USD',\n            sourceId: cards[0].id\n        });\n\n        //console.log(payment.data)\n        \n        setPaymentId(payment.data.id)\n        \n        let interval = setInterval(() => {\n            if (success || error) {\n                clearInterval(interval)\n            }\n            //console.log(paymentId)\n            checkPayment(payment.data.id);\n        }, 2000);\n\n        setTimeout(() => {\n            clearInterval(interval);\n        }, 5000)\n    }\n\n    async function checkPayment(paymentID) {\n        //console.log(paymentID)\n        if (paymentID !== null) {\n            let payment = await CircleApi.getPayment(paymentID);\n            //console.log(payment)\n            if (payment.status == 'confirmed' || payment.status == 'success') {\n                setProcessing(false);\n                setSuccess(true);\n            } else if (payment.status == 'failed' || payment.status == 'payment_failed') {\n                setProcessing(false);\n                setError(true);\n            }\n        }\n    }\n\n    async function getCards() {\n        setLoading(true);\n\n       let cards = await CircleApi.getCard();\n\n\n        if (cards.data.length == 0) {\n            let cards = await CircleApi.createCard();\n        }\n        else {\n            setCards(cards.data);\n            setLoading(false);\n        }\n    }\n    \n\n    React.useEffect(() => {\n        if (cards.length === 0) {\n            getCards();\n        }\n    }, [cards]);\n        const classes = useStyles();\n        if (loading) {\n            return (\n                <LinearProgress />\n            )\n        } else if (processing) {\n            return (\n                <React.Fragment>\n                    <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.label} >\n                        Processing payment\n                    </Typography>\n                    <div className={classes.cardWrapper}>\n                        <img src=\"loader.gif\" alt=\"alternative\" className={classes.loader} />\n                    </div>\n\n                    <div\n                    style={{\n                        whiteSpace: 'normal',\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        justifyContent: 'space-between',\n                        flexDirection: 'row',\n                        padding: 30,\n                    }}>\n                        <div style={{\n                            whiteSpace: 'normal',\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            flexDirection: 'row',\n                            justifyContent: 'flex-start',\n                            \n                        }}>\n                        \n                            <img src=\"circle.png\" alt=\"alternative\" className={classes.circle} style={{height: 25, width: 25, marginRight: 10, position: 'relative', top: 10}} />\n                            <div\n                            style={{\n                                whiteSpace: 'normal',\n                                display: 'flex',\n                                flexWrap: 'wrap',\n                                justifyContent: 'space-between',\n                                flexDirection: 'column',\n                            }}>\n                                <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.heading} style={{fontSize: 14, lineHeight: '10px'}}>\n                                    Circle Merch\n                                </Typography>\n                                <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.subHeading} style={{fontSize: 10}}>\n                                    Boston, MA\n                                </Typography>\n                            </div>\n                        </div>\n                        <div style={{\n                            whiteSpace: 'normal',\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            justifyContent: 'space-between'\n                        }}>\n                            <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.heading} style={{fontSize: 20}}>\n                                ARS $10.00\n                            </Typography>\n                        </div>\n                    </div>\n\n                    <Grid item xs={12} md={12} >\n                        <div className={classes.selectWrapper}>\n                            <Select variant=\"filled\" required id=\"amount\" \n                                classes={{\n                                    root: classes.select, // class name, e.g. `classes-nesting-root-x`\n                                }}\n                                fullWidth\n                                //onChange={handleChange}\n                                defaultValue={cards[0]}\n                                renderValue={selected => {\n                                    return (\n                                        <div\n                                            style={{\n                                                whiteSpace: 'normal',\n                                                display: 'flex',\n                                                flexWrap: 'wrap',\n                                                justifyContent: 'center'\n                                            }}\n                                        >\n                                            <React.Fragment>\n                                                <Typography style={{\n                                                    lineHeight: '35px',\n                                                    maxWidth: '70%',\n                                                    overflow: 'hidden',\n                                                    height: 35,\n                                                }}>\n                                                    {selected.id}\n                                                </Typography>\n                                                <img src=\"marstercard.png\" alt=\"alternative\" className={classes.cardIcon} style={{height: '20'}} />\n                                            </React.Fragment>\n                                        </div>\n                                    );\n                                }}\n                            >\n                                {cards.map(value => {\n                                        return (\n                                            <React.Fragment>\n                                                <Typography>\n                                                    {value.id}\n                                                </Typography> \n                                            </React.Fragment>\n                                        );\n                                    })}\n                            </Select>\n                        </div>\n                        </Grid>\n\n                        <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.heading} style={{fontSize: 16, textAlign:'center', marginTop: 10}}>\n                            Cancel\n                        </Typography>\n\n                </React.Fragment>\n            )\n        }\n        else if (success) {\n            return (\n                <React.Fragment>\n                    <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.label} >\n                        Payment Successful\n                    </Typography>\n                    <div className={classes.cardWrapper}>\n                        <img src=\"success.gif\" alt=\"alternative\" className={classes.success} />\n                    </div>\n\n                    <div\n                    style={{\n                        whiteSpace: 'normal',\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        justifyContent: 'space-between',\n                        flexDirection: 'row',\n                        padding: 30,\n                    }}>\n                        <div style={{\n                            whiteSpace: 'normal',\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            flexDirection: 'row',\n                            justifyContent: 'flex-start',\n                            \n                        }}>\n                        \n                            <img src=\"circle.png\" alt=\"alternative\" className={classes.circle} style={{height: 25, width: 25, marginRight: 10, position: 'relative', top: 10}} />\n                            <div\n                            style={{\n                                whiteSpace: 'normal',\n                                display: 'flex',\n                                flexWrap: 'wrap',\n                                justifyContent: 'space-between',\n                                flexDirection: 'column',\n                            }}>\n                                <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.heading} style={{fontSize: 14, lineHeight: '10px'}}>\n                                    Circle Merch\n                                </Typography>\n                                <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.subHeading} style={{fontSize: 10}}>\n                                    Boston, MA\n                                </Typography>\n                            </div>\n                        </div>\n                        <div style={{\n                            whiteSpace: 'normal',\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            justifyContent: 'space-between'\n                        }}>\n                            <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.heading} style={{fontSize: 20}}>\n                                ARS $10.00\n                            </Typography>\n                        </div>\n                    </div>\n\n                    <Grid item xs={12} md={12} >\n                        <div className={classes.selectWrapper}>\n                            <Select variant=\"filled\" required id=\"amount\" \n                                classes={{\n                                    root: classes.select, // class name, e.g. `classes-nesting-root-x`\n                                }}\n                                fullWidth\n                                //onChange={handleChange}\n                                defaultValue={cards[0]}\n                                renderValue={selected => {\n                                    return (\n                                        <div\n                                            style={{\n                                                whiteSpace: 'normal',\n                                                display: 'flex',\n                                                flexWrap: 'wrap',\n                                                justifyContent: 'center'\n                                            }}\n                                        >\n                                            <React.Fragment>\n                                                <Typography style={{\n                                                    lineHeight: '35px',\n                                                    maxWidth: '70%',\n                                                    overflow: 'hidden',\n                                                    height: 35,\n                                                }}>\n                                                    {selected.id}\n                                                </Typography>\n                                                <img src=\"marstercard.png\" alt=\"alternative\" className={classes.cardIcon} style={{height: '20'}} />\n                                            </React.Fragment>\n                                        </div>\n                                    );\n                                }}\n                            >\n                                {cards.map(value => {\n                                        return (\n                                            <React.Fragment>\n                                                <Typography>\n                                                    {value.id}\n                                                </Typography> \n                                            </React.Fragment>\n                                        );\n                                    })}\n                            </Select>\n                        </div>\n                        </Grid>\n\n                        <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.heading} style={{fontSize: 16, textAlign:'right', marginTop: 10}}>\n                            Email Receipt\n                        </Typography>\n\n                </React.Fragment>\n            )\n        }\n        else {\n            return (\n                <React.Fragment>\n                    <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.label} >\n                        Confirm your payment to:\n                    </Typography>\n                    <div className={classes.cardWrapper}\n                        style={{\n                            whiteSpace: 'normal',\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            justifyContent: 'space-between',\n                            flexDirection: 'row',\n                            padding: 30,\n                            marginBottom: 20\n                        }}>\n                        <div style={{\n                            whiteSpace: 'normal',\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            flexDirection: 'column',\n                            justifyContent: 'flex-start',\n                            \n                        }}>\n                        <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.heading} >\n                            Circle Merch\n                        </Typography>\n                        <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.subHeading} >\n                            Boston, MA\n                        </Typography>\n                        </div>\n                        <div style={{\n                            whiteSpace: 'normal',\n                            display: 'flex',\n                            flexWrap: 'wrap',\n                            justifyContent: 'space-between'\n                        }}>\n                            <img src=\"circle.png\" alt=\"alternative\" className={classes.circle} />\n                        </div>\n                    </div>\n                    <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.label} >\n                        You are paying:\n                    </Typography>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={12} >\n                        <div className={classes.inputWrapper}>\n                            <img src=\"ars.png\" alt=\"alternative\" className={classes.currency} />\n                            ARS $\n                            <Input variant=\"filled\" required id=\"amount\" \n                            classes={{\n                                root: classes.input, // class name, e.g. `classes-nesting-root-x`\n                            }}\n                            value=\"10\" disableUnderline={true}  />\n                        </div>\n                        </Grid>\n                    </Grid>\n                    <Typography variant=\"h6\" gutterBottom color=\"white\" className={classes.label} style={{marginTop: 20}} >\n                        From: \n                    </Typography>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={12} >\n                        <div className={classes.selectWrapper}>\n                            <Select variant=\"filled\" required id=\"amount\" \n                                classes={{\n                                    root: classes.select, // class name, e.g. `classes-nesting-root-x`\n                                }}\n                                fullWidth\n                                //onChange={handleChange}\n                                defaultValue={cards[0]}\n                                renderValue={selected => {\n                                    return (\n                                        <div\n                                            style={{\n                                                whiteSpace: 'normal',\n                                                display: 'flex',\n                                                flexWrap: 'wrap',\n                                                justifyContent: 'center'\n                                            }}\n                                        >\n                                            <React.Fragment>\n                                                <Typography style={{\n                                                    lineHeight: '35px',\n                                                    maxWidth: '70%',\n                                                    overflow: 'hidden',\n                                                    height: 35,\n                                                }}>\n                                                    {selected.id}\n                                                </Typography>\n                                                <img src=\"marstercard.png\" alt=\"alternative\" className={classes.cardIcon} style={{height: '20'}} />\n                                            </React.Fragment>\n                                        </div>\n                                    );\n                                }}\n                            >\n                                {cards.map(value => {\n                                        return (\n                                            <React.Fragment>\n                                                <Typography>\n                                                    {value.id}\n                                                </Typography> \n                                            </React.Fragment>\n                                        );\n                                    })}\n                            </Select>\n                        </div>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                        {error && \n                            <Typography color={'red'}>\n                                {'There was an error processing your payment'}\n                            </Typography> \n                        }\n\n                        <Button color=\"secondary\" variant={'primary'} fullWidth className={classes.button} onClick={() => createPayment()}>\n                            Pay Now\n                        </Button>\n                        </Grid>\n                    </Grid>\n                </React.Fragment>\n            )\n        }\n    \n}","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport PaymentForm from './PaymentForm';\n\nexport default function App() {\n  return (\n    <Container maxWidth=\"sm\">\n      <Box my={4}>\n        <PaymentForm />\n      </Box>\n    </Container>\n  );\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#3936BE',\n    },\n    secondary: {\n      main: '#F47500',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#171822',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}